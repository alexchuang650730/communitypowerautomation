name: PowerAutomation CI/CD Quality Check

on:
  # 推送到主分支時觸發
  push:
    branches: [ main, master ]
  
  # Pull Request時觸發
  pull_request:
    branches: [ main, master ]
  
  # 定時觸發 - 每天凌晨2點執行完整檢查
  schedule:
    - cron: '0 2 * * *'
  
  # 手動觸發
  workflow_dispatch:
    inputs:
      test_type:
        description: '測試類型'
        required: true
        default: 'quick'
        type: choice
        options:
        - quick
        - full
      
      force_run:
        description: '強制運行（忽略緩存）'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  PROJECT_ROOT: '/home/runner/work/communitypowerautomation/communitypowerautomation'

jobs:
  # 十層級測試作業
  ten-layer-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.test_type == 'quick')
    
    steps:
    - name: 檢出代碼
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 設置Python環境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 安裝依賴
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        # 安裝測試所需的額外依賴
        pip install pytest pytest-cov bandit safety
    
    - name: 設置項目環境
      run: |
        # 創建必要的目錄
        mkdir -p ci_cd/{results,reports,logs,alerts,notifications}
        mkdir -p test/results
        
        # 設置執行權限
        chmod +x ci_cd/run_checks.sh
        chmod +x test/ten_layer_test_executor.py
        
        # 檢查配置文件
        if [ ! -f ci_cd/config.json ]; then
          echo "配置文件不存在，使用默認配置"
          cp ci_cd/config.json.example ci_cd/config.json 2>/dev/null || true
        fi
    
    - name: 運行十層級測試系統
      id: ten_layer_tests
      run: |
        echo "🚀 開始十層級測試系統執行..."
        
        # 運行關鍵層級測試（適合CI/CD環境）
        if python test/ten_layer_test_executor.py --mode critical --output test/results/ci_ten_layer_results.json; then
          echo "ten_layer_passed=true" >> $GITHUB_OUTPUT
          echo "✅ 十層級測試通過"
        else
          echo "ten_layer_passed=false" >> $GITHUB_OUTPUT
          echo "❌ 十層級測試失敗"
          exit 1
        fi
        
        # 顯示測試結果摘要
        if [ -f test/results/ci_ten_layer_results.json ]; then
          echo "📊 測試結果摘要:"
          python -c "
import json
with open('test/results/ci_ten_layer_results.json', 'r') as f:
    results = json.load(f)
    summary = results.get('summary', {})
    print(f'總層級數: {summary.get(\"total_layers\", 0)}')
    print(f'通過層級: {summary.get(\"passed_layers\", 0)}')
    print(f'失敗層級: {summary.get(\"failed_layers\", 0)}')
    print(f'關鍵失敗: {summary.get(\"critical_failures\", 0)}')
    print(f'執行時間: {summary.get(\"total_execution_time\", 0):.2f}秒')
          "
        fi
    
    - name: 運行快速質量檢查
      id: quick_check
      run: |
        echo "開始快速質量檢查..."
        
        # 運行快速檢查
        ./ci_cd/run_checks.sh quick
        
        # 提取結果
        if [ -f ci_cd/logs/quick_check.log ]; then
          echo "檢查日誌:"
          cat ci_cd/logs/quick_check.log
        fi
        
        # 檢查是否通過
        if grep -q "質量檢查結果: ✅ 通過" ci_cd/logs/quick_check.log; then
          echo "quick_check_passed=true" >> $GITHUB_OUTPUT
          echo "✅ 快速檢查通過"
        else
          echo "quick_check_passed=false" >> $GITHUB_OUTPUT
          echo "❌ 快速檢查失敗"
          exit 1
        fi
    
    - name: 上傳測試結果
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: ten-layer-and-quality-check-results
        path: |
          ci_cd/results/
          ci_cd/reports/
          ci_cd/logs/
          test/results/
        retention-days: 30
    
    - name: 評論PR結果
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          
          // 讀取十層級測試結果
          let tenLayerResults = null;
          if (fs.existsSync('test/results/ci_ten_layer_results.json')) {
            tenLayerResults = JSON.parse(fs.readFileSync('test/results/ci_ten_layer_results.json', 'utf8'));
          }
          
          // 讀取質量檢查結果
          let qualityCheckPassed = false;
          if (fs.existsSync('ci_cd/logs/quick_check.log')) {
            const logContent = fs.readFileSync('ci_cd/logs/quick_check.log', 'utf8');
            qualityCheckPassed = logContent.includes('質量檢查結果: ✅ 通過');
          }
          
          // 構建評論內容
          let comment = `## 🧪 PowerAutomation 自動化測試結果
          
**檢查時間**: ${new Date().toISOString()}
**觸發事件**: Pull Request

### 🏗️ 十層級測試系統
`;
          
          if (tenLayerResults) {
            const summary = tenLayerResults.summary || {};
            const tenLayerPassed = summary.critical_failures === 0;
            
            comment += `**狀態**: ${tenLayerPassed ? '✅ 通過' : '❌ 失敗'}
**總層級數**: ${summary.total_layers || 0}
**通過層級**: ${summary.passed_layers || 0}
**失敗層級**: ${summary.failed_layers || 0}
**關鍵失敗**: ${summary.critical_failures || 0}
**執行時間**: ${(summary.total_execution_time || 0).toFixed(2)}秒

`;
            
            // 添加詳細層級結果
            if (tenLayerResults.layers) {
              comment += `#### 詳細層級結果:
`;
              for (const [layerId, layerResult] of Object.entries(tenLayerResults.layers)) {
                const status = layerResult.overall_success ? '✅' : '❌';
                comment += `- ${status} 第${layerId}層級: ${layerResult.name} (${(layerResult.execution_time || 0).toFixed(2)}s)
`;
              }
            }
          } else {
            comment += `**狀態**: ❌ 測試結果文件不存在
`;
          }
          
          comment += `
### 🔍 GAIA質量檢查
**狀態**: ${qualityCheckPassed ? '✅ 通過' : '❌ 失敗'}

### 📋 總結
`;
          
          const overallPassed = tenLayerResults && tenLayerResults.summary.critical_failures === 0 && qualityCheckPassed;
          
          if (overallPassed) {
            comment += `✅ **所有測試通過，代碼可以安全合併**

- 十層級測試系統運行正常
- GAIA質量檢查達標
- 系統準備好部署`;
          } else {
            comment += `❌ **測試未完全通過，請檢查並修復問題**

請查看詳細日誌並修復失敗的測試項目。`;
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # 完整檢查作業
  full-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.test_type == 'full')
    
    steps:
    - name: 檢出代碼
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 設置Python環境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 安裝依賴
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        pip install pytest pytest-cov
    
    - name: 設置項目環境
      run: |
        mkdir -p ci_cd/{results,reports,logs,alerts,notifications}
        chmod +x ci_cd/run_checks.sh
    
    - name: 運行完整質量檢查
      id: full_check
      run: |
        echo "開始完整質量檢查..."
        
        # 設置超時（30分鐘）
        timeout 1800 ./ci_cd/run_checks.sh full || {
          echo "完整檢查超時或失敗"
          exit 1
        }
        
        # 檢查結果
        if grep -q "質量檢查結果: ✅ 通過" ci_cd/logs/full_check.log; then
          echo "full_check_passed=true" >> $GITHUB_OUTPUT
          echo "✅ 完整檢查通過"
        else
          echo "full_check_passed=false" >> $GITHUB_OUTPUT
          echo "❌ 完整檢查失敗"
          exit 1
        fi
    
    - name: 生成趨勢分析
      run: |
        echo "生成趨勢分析..."
        ./ci_cd/run_checks.sh trend 7
    
    - name: 上傳完整測試結果
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: full-check-results
        path: |
          ci_cd/results/
          ci_cd/reports/
          ci_cd/logs/
        retention-days: 90
    
    - name: 發送Slack通知
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#powerautomation-ci'
        text: |
          PowerAutomation 完整質量檢查完成
          狀態: ${{ steps.full_check.outputs.full_check_passed == 'true' && '✅ 通過' || '❌ 失敗' }}
          分支: ${{ github.ref }}
          提交: ${{ github.sha }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # 健康檢查作業
  health-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: 檢出代碼
      uses: actions/checkout@v4
    
    - name: 設置Python環境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 運行健康檢查
      run: |
        chmod +x ci_cd/run_checks.sh
        ./ci_cd/run_checks.sh health
    
    - name: 清理舊文件
      run: |
        ./ci_cd/run_checks.sh cleanup

  # 部署檢查作業（僅在主分支）
  deploy-check:
    runs-on: ubuntu-latest
    needs: [ten-layer-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 檢出代碼
      uses: actions/checkout@v4
    
    - name: 檢查部署就緒狀態
      run: |
        echo "檢查系統是否準備好部署..."
        
        # 檢查最新的測試結果
        if [ -f ci_cd/results/quick_check_*.json ]; then
          latest_result=$(ls -t ci_cd/results/quick_check_*.json | head -1)
          
          # 檢查是否達到部署標準
          if grep -q '"passed": true' "$latest_result"; then
            echo "✅ 系統準備好部署"
            echo "deploy_ready=true" >> $GITHUB_OUTPUT
          else
            echo "❌ 系統未準備好部署"
            echo "deploy_ready=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "❌ 沒有找到測試結果"
          echo "deploy_ready=false" >> $GITHUB_OUTPUT
        fi
    
    - name: 創建部署標籤
      if: steps.deploy-check.outputs.deploy_ready == 'true'
      run: |
        # 創建部署標籤
        timestamp=$(date +%Y%m%d-%H%M%S)
        tag_name="deploy-${timestamp}"
        
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git tag -a "$tag_name" -m "自動部署標籤 - 質量檢查通過"
        git push origin "$tag_name"
        
        echo "✅ 創建部署標籤: $tag_name"

  # 性能監控作業
  performance-monitor:
    runs-on: ubuntu-latest
    needs: [ten-layer-tests]
    if: always()
    
    steps:
    - name: 檢出代碼
      uses: actions/checkout@v4
    
    - name: 分析性能趨勢
      run: |
        echo "分析性能趨勢..."
        
        # 這裡可以添加性能分析邏輯
        # 例如：比較執行時間、成功率變化等
        
        if [ -f ci_cd/logs/quick_check.log ]; then
          echo "最新檢查結果:"
          grep "成功率\|執行時間" ci_cd/logs/quick_check.log || true
        fi
    
    - name: 更新性能儀表板
      run: |
        echo "更新性能儀表板..."
        # 這裡可以集成到監控系統
        # 例如：Grafana、Datadog等

